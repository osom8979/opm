#!/usr/bin/env bash

if ! command -v opm-version &> /dev/null; then
PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" || exit; pwd):$PATH"
fi

USAGE="
Package manager.

  Usage: opm-package [options] [command] packages ...

Available options are:
  -h, --help        Print this message.
  -m {name}, --manager={name}
                    Select a package manager.
  -v, --verbose     Be more verbose/talkative during the operation.
  -s, --silent      Suppresses all messages.
  --                Skip handling options.

Available command are:
  get-manager   Install the package-manager.
  which         Shows the full path of package-manager commands.
  update        Synchronize the database.
  list          Print the installed list.
                If arguments are included, the package is queried for existence.
  files         List all files owned by a given package.
                The output format is as follows: '{package} {file}'
  install       Install the package.
  remove        Remove the package.
"

function print_usage
{
    echo "$USAGE"
}

function find_target
{
    local kernel_name
    kernel_name=$(opm-distribution -k)

    if [[ $kernel_name == darwin ]]; then
        echo "darwin_brew"
    elif [[ $kernel_name == linux ]]; then
        local distribution
        distribution=$(opm-distribution -i)

        case $distribution in
        arch)
            echo "linux_arch_pacman"
            ;;
        ubuntu)
            echo "linux_ubuntu_apt"
            ;;
        *)
            opm-println-error -s "Unsupported distribution: $distribution"
            return 1
            ;;
        esac
    else
        echo "$kernel_name"
    fi
}

function get_target_with_manager
{
    local manager=$1
    if [[ -z $manager ]]; then
        opm-println-error -s "Requires manager argument."
        return 1
    fi

    case $manager in
    pacman)
        echo "linux_arch_pacman"
        ;;
    dpkg|apt|apt-get)
        echo "linux_ubuntu_apt"
        ;;
    homebrew|brew)
        echo "darwin_brew"
        ;;
    *)
        opm-println-error -s "Unsupported manager argument: $manager"
        return 1
        ;;
    esac
}

function do_get_manager
{
    local target=$1
    shift

    "get_manager_$target"
}

function do_which
{
    local target=$1
    shift

    "which_$target"
}

function do_update
{
    local target=$1
    shift

    if [[ -z $("which_$target") ]]; then
        opm-println-error -s "Not found package-manager command."
        return 1
    fi

    "update_$target"
}

function find_package
{
    local target=$1
    shift

    for i in "$@"; do
        if [[ "$target" == "$i" ]]; then
            echo "$target"
        fi
    done
}

function do_list
{
    local target=$1
    shift

    if [[ -z $("which_$target") ]]; then
        opm-println-error -s "Not found package-manager command."
        return 1
    fi

    local packages
    mapfile -t packages < <("list_$target" "$@")
    if [[ $# -eq 0 ]]; then
        echo "${packages[@]}"
        return 0
    fi

    local count=0
    local grepped_package
    for i in "$@"; do
        grepped_package=$(find_package "$i" "${packages[@]}")
        if [[ -n $grepped_package ]]; then
            if [[ $VERBOSE -ne 0 ]]; then
                opm-println-info "+ $i"
            else
                echo "+ $i"
            fi
            (( count += 1 ))
        else
            if [[ $VERBOSE -ne 0 ]]; then
                opm-println-error "- $i"
            else
                echo "- $i"
            fi
        fi
    done

    if [[ $count -eq $# ]]; then
        return 0
    else
        return 1
    fi
}

function do_files
{
    local target=$1
    shift

    if [[ -z $("which_$target") ]]; then
        opm-println-error -s "Not found package-manager command."
        return 1
    fi
    if [[ $# -eq 0 ]]; then
        opm-println-error -s "You must enter the package."
        return 1
    fi

    "files_$target" "$@"
}

function do_install
{
    local target=$1
    shift

    if [[ -z $("which_$target") ]]; then
        opm-println-error -s "Not found package-manager command."
        return 1
    fi
    if [[ $# -eq 0 ]]; then
        opm-println-error -s "You must enter the package."
        return 1
    fi

    "install_$target" "$@"
}

function do_remove
{
    local target=$1
    shift

    if [[ -z $("which_$target") ]]; then
        opm-println-error -s "Not found package-manager command."
        return 1
    fi
    if [[ $# -eq 0 ]]; then
        opm-println-error -s "You must enter the package."
        return 1
    fi

    "remove_$target" "$@"
}

function package_main
{
    local manager
    local verbose_flag=0
    local silent_flag=0

    while [[ -n $1 ]]; do
        case $1 in
        -h|--help)
            print_usage
            return 0
            ;;
        --manager=*)
            manager=${1:10}
            shift
            ;;
        -m|--manager)
            manager=${2}
            shift 2
            ;;
        -v|--verbose)
            verbose_flag=1
            shift
            ;;
        -s|--silent)
            silent_flag=1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
        esac
    done

    if [[ $verbose_flag -ne 0 ]]; then
        VERBOSE=1
        export VERBOSE
    fi
    if [[ $silent_flag -ne 0 ]]; then
        SILENT=1
        export SILENT
    fi

    local target
    if [[ -n $manager ]]; then
        target=$(get_target_with_manager "$manager")
    else
        target=$(find_target)
    fi

    local code=$?
    if [[ $code -ne 0 ]]; then
        return $code
    fi

    opm-println-info -v -s "Selected target name: $target"

    local target_file_name="opm-package-${target//_/-}"
    local which_target_source
    which_target_source=$(which "$target_file_name" 2> /dev/null)
    if [[ -z "$which_target_source" ]]; then
        opm-println-error -s "Not found target file: $target_file_name"
        return 1
    fi

    opm-println-info -v -s "Target source path: $which_target_source"

    # shellcheck disable=SC1090
    source "$which_target_source"

    if [[ $# -eq 0 ]]; then
        opm-println-error -s "You must enter the command."
        return 1
    fi

    local command=$1
    shift

    case $command in
    get-manager)
        do_get_manager "$target"
        ;;
    which)
        do_which "$target"
        ;;
    update)
        do_update "$target"
        ;;
    list)
        do_list "$target" "$@"
        ;;
    files)
        do_files "$target" "$@"
        ;;
    install)
        do_install "$target" "$@"
        ;;
    remove)
        do_remove "$target" "$@"
        ;;
    *)
        opm-println-error -s "Invalid command: $command"
        return 1
        ;;
    esac
}

package_main "$@"
