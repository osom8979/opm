#!/usr/bin/env bash

if [[ -z $(which opm-version 2> /dev/null) ]]; then
OPM_BIN_PATH=`cd "$(dirname "${BASH_SOURCE[0]}")"; echo "$PWD"`
PATH="$OPM_BIN_PATH:$PATH"
fi

# ref: https://github.com/pyenv/pyenv/wiki

OPY_PREFIX=${OPY_PREFIX:-opy}
OPY_VERSION=${OPY_PREFIX:-3.7.7}

PLATFORM=`platform`
INSTALL_RESULT_CODE=0

function find_not_installed_packages
{
    if [[ $# -eq 1 ]]; then
        if [[ -z $(which $1 2> /dev/null) ]]; then
            echo $1
        fi
        shift
    fi
    if [[ $# -ge 1 ]]; then
        for i in $@; do
            echo " $i"
        done
    fi
}

function install_pyenv_on_auto_detect
{
    local not_installed_packages=$(find_not_installed_packages git curl)
    if [[ -n $not_installed_packages ]]; then
        opm-println "Not found commands: $not_installed_packages"
        opm-package sync
        opm-package install $not_installed_packages

        not_installed_packages=$(find_not_installed_packages git curl)
        if [[ -n $not_installed_packages ]]; then
            opm-println-error "installation failed: $not_installed_packages"
            return 1
        fi
    fi

    opm-println "Install pyenv from pyenv-installer"
    opm-println " - ref: https://github.com/pyenv/pyenv-installer"

    curl -L "https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer" | /bin/bash
}

function install_pyenv_on_darwin
{
    if [[ -z $(opm-package -m brew which) ]]; then
        opm-println "Not found homebrew -> Install brew ..."
        opm-package -m brew get-manager

        if [[ -z $(opm-package -m brew which) ]]; then
            opm-println-error "Homebrew installation failed."
            return 1
        fi
    fi

    opm-println "Install pyenv from brew ..."
    opm-package -m brew sync
    opm-package -m brew install pyenv pyenv-virtualenv
}

function install_pyenv
{
    local kernel=$(opm-distribution -k)
    if [[ $kernel == darwin ]]; then
        install_pyenv_on_darwin
    else
        install_pyenv_on_auto_detect
    fi
}

function install_pyenv_if_not_exist
{
    local which_pyenv=`PATH=~/.pyenv/bin/:$PATH which pyenv 2> /dev/null`
    if [[ -n $which_pyenv ]]; then
        return 0
    fi

    opm-println "Not found pyenv command."
    install_pyenv

    local code=$?
    if [[ $code -ne 0 ]]; then
        opm-println-error "pyenv installation failed: $code"
        return $code
    fi
}

USER_NAME=$(id -u -n)
OPY_VERSION_REGEX=`echo $OPY_VERSION | sed 's/\./\\\\./g'`
OPY_ENV_NAME="${OPY_PREFIX}-${USER_NAME}-${OPY_VERSION}"
OPY_ENV_NAME_REGEX=`echo $OPY_ENV_NAME | sed 's/\./\\\\./g'`

export PATH="~/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

function getPackageListOfNotExists {
    if [[ "$PLATFORM" == "MacOSX" ]]; then
        # Mac - Homebrew
        local package_list=`brew list -1`
    else
        # Ubuntu - dpkg
        local package_list=`dpkg -l | sed -n '/+++/,$p' | sed -n '2,$p' | awk '{print $2}'`
    fi
    local check_list=$1
    local result_list=' '
    for cursor in $check_list; do
        if [[ -z $(echo ${package_list} | grep ${cursor}) ]]; then
            result_list="$result_list $cursor"
        fi
    done
    echo $result_list
}

function installDependencies {
    if [[ "$PLATFORM" == "MacOSX" ]]; then
        local list="openssl readline xz"
    else
        local list="make build-essential libssl-dev zlib1g-dev libbz2-dev"
        list="$list libreadline-dev libsqlite3-dev wget curl llvm "
        list="$list libncurses5-dev xz-utils tk-dev"
    fi
    INSTALL_LIST=`getPackageListOfNotExists "$list"`
    if [[ ! -z $INSTALL_LIST ]]; then
        if [[ "$PLATFORM" == "MacOSX" ]]; then
            brew update
            # brew upgrade pyenv pyenv-virtualenv
            brew install $INSTALL_LIST
            return $?
        else
            sudo apt-get update
            sudo apt-get install -y $INSTALL_LIST
            return $?
        fi
    fi
    return 0
}

FIND_PYTHON_ENV=`pyenv versions | sed 's/*//g' | awk '{print($1);}' | egrep "^${OPY_VERSION_REGEX}$"`
if [[ -z $FIND_PYTHON_ENV ]]; then
    echo "Not found $OPY_VERSION pyenv."
    echo "Check & Install dependencies ..."

    installDependencies
    INSTALL_RESULT_CODE=$?
    if [[ $INSTALL_RESULT_CODE -ne 0 ]]; then
        echo "Install dependencies failure: $INSTALL_RESULT_CODE"
        exit 1
    fi

    if [[ "$PLATFORM" == "MacOSX" ]]; then
        echo "Use the homebrew's OpenSSL."
        echo " * See also: https://github.com/pyenv/pyenv/wiki/Common-build-problems"
        echo "Install python from pyenv (--enable-framework) ..."
        CFLAGS="-I$(brew --prefix openssl)/include -I$(brew --prefix zlib)/include -I$(brew --prefix sqlite)/include" \
        LDFLAGS="-L$(brew --prefix openssl)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix sqlite)/lib" \
        PYTHON_CONFIGURE_OPTS="--enable-framework"  \
            pyenv install $OPY_VERSION
        INSTALL_RESULT_CODE=$?
    else
        echo "Install python from pyenv (--enable-shared) ..."
        PYTHON_CONFIGURE_OPTS="--enable-shared" \
            pyenv install $OPY_VERSION
        INSTALL_RESULT_CODE=$?
    fi

    if [[ $INSTALL_RESULT_CODE -ne 0 ]]; then
        echo "Install failure: $INSTALL_RESULT_CODE"
        exit 1
    fi
fi

FIND_OPY_ENV=`pyenv versions | sed 's/*//g' | awk '{print($1);}' | egrep "^$OPY_ENV_NAME_REGEX$"`
#echo "FIND_OPY_ENV: $FIND_OPY_ENV"
if [[ -z $FIND_OPY_ENV ]]; then
    echo "Not found $OPY_ENV_NAME pyenv."
    pyenv virtualenv "$OPY_VERSION" "$OPY_ENV_NAME"
fi

CURRENT_PYENV_VERSION=`pyenv version | awk '{ print($1); }'`
#echo "CURRENT_PYENV_VERSION: $CURRENT_PYENV_VERSION"
if [[ "$CURRENT_PYENV_VERSION" != "$OPY_ENV_NAME" ]]; then
    pyenv shell $OPY_ENV_NAME
else
    pyenv activate $OPY_ENV_NAME
    #pyenv deactivate
fi

if [[ -z $OPY_ECHO ]]; then
    if [[ -z $OPY_QUIET || $OPY_QUIET -eq 0 ]]; then
        OPY_ECHO=1
    else
        OPY_ECHO=0
    fi
fi

if [[ $OPY_ECHO -ne 0 ]]; then
    echo "[OSOM Python Environment]"
    echo "* Python version: $(python --version 2>&1)"
    echo "* Python executable: $(which python)"
    echo "* Pyenv which python: $(pyenv which python)"
    echo "* Pyenv version: $(pyenv version | awk '{print($1);}')"
fi

