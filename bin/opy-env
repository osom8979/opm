#!/usr/bin/env bash

# Suggested build environment
#
# pyenv will try its best to download and compile the wanted Python version,
# but sometimes compilation fails because of unmet system dependencies,
# or compilation succeeds but the new Python version exhibits weird failures at runtime.
# The following instructions are our recommendations for a sane build environment.
#
# Mac OS X:
#   brew install openssl readline xz
# Ubuntu/Debian/Mint:
#   apt-get install -y make build-essential \
#       libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
#       wget curl llvm libncurses5-dev xz-utils tk-dev
# CentOS/Fedora 21 and below:
#   yum install gcc zlib-devel bzip2 \
#       bzip2-devel readline-devel sqlite sqlite-devel openssl-devel tk-devel
# Fedora 22 and above:
#   dnf install -y gcc zlib-devel bzip2 \
#   bzip2-devel readline-devel sqlite sqlite-devel openssl-devel tk-devel
# openSUSE:
#   zypper install gcc automake openssl-devel ncurses-devel readline-devel zlib-devel tk-devel
# Arch Linux:
#   pacman -S base-devel openssl zlib
# Linuxbrew:
#   brew install bzip2 openssl readline sqlite xz
#
# See also:
#   https://github.com/pyenv/pyenv/wiki

if [[ -z $OPY_ENV_PREFIX ]]; then
OPY_ENV_PREFIX=opy
fi

if [[ -z $OPY_PYTHON_VERSION ]]; then
#OPY_PYTHON_VERSION=`python --version 2>&1 | awk '{print($2);}'`
OPY_PYTHON_VERSION=3.6.8
fi

PYENV_CMD=`PATH=~/.pyenv/bin/:$PATH which pyenv`
PLATFORM=`platform`
INSTALL_RESULT_CODE=0

if [[ -z $PYENV_CMD ]]; then
    echo "Not found pyenv command."

    if [[ "$PLATFORM" == "MacOSX" ]]; then
        BREW_CMD=`which brew`
        if [[ -z $BREW_CMD ]]; then
            echo "Not found brew command -> Install brew ..."
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        fi

        BREW_CMD=`which brew`
        if [[ -z $BREW_CMD ]]; then
            exit 1
        fi

        echo "Install pyenv from brew ..."
        brew update
        brew install pyenv pyenv-virtualenv
        INSTALL_RESULT_CODE=$?
    else
        GIT_CMD=`which git`
        if [[ -z $GIT_CMD ]]; then
            echo "Not found git command -> Install git ..."
            sudo apt-get update
            sudo apt-get install -y git
        fi

        GIT_CMD=`which git`
        if [[ -z $GIT_CMD ]]; then
            exit 1
        fi

        echo "Install pyenv from pyenv-installer (see: https://github.com/pyenv/pyenv-installer)"
        curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
        INSTALL_RESULT_CODE=$?
    fi

    if [[ $INSTALL_RESULT_CODE -ne 0 ]]; then
        echo "Install failure: $INSTALL_RESULT_CODE"
        exit 1
    fi

    PYENV_CMD=`PATH=~/.pyenv/bin/:$PATH which pyenv`
    if [[ -z $PYENV_CMD ]]; then
        exit 1
    fi
fi

USER_NAME=`id -u -n`
OPY_PYTHON_VERSION_REGEX=`echo $OPY_PYTHON_VERSION | sed 's/\./\\\\./g'`
OPY_ENV_NAME="${OPY_ENV_PREFIX}-${USER_NAME}-${OPY_PYTHON_VERSION}"
OPY_ENV_NAME_REGEX=`echo $OPY_ENV_NAME | sed 's/\./\\\\./g'`

export PATH="~/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

function getPackageListOfNotExists {
    if [[ "$PLATFORM" == "MacOSX" ]]; then
        # Mac - Homebrew
        local package_list=`brew list -1`
    else
        # Ubuntu - dpkg
        local package_list=`dpkg -l | sed -n '/+++/,$p' | sed -n '2,$p' | awk '{print $2}'`
    fi
    local check_list=$1
    local result_list=' '
    for cursor in $check_list; do
        if [[ -z $(echo ${package_list} | grep ${cursor}) ]]; then
            result_list="$result_list $cursor"
        fi
    done
    echo $result_list
}

function installDependencies {
    if [[ "$PLATFORM" == "MacOSX" ]]; then
        local list="openssl readline xz"
    else
        local list="make build-essential libssl-dev zlib1g-dev libbz2-dev"
        list="$list libreadline-dev libsqlite3-dev wget curl llvm "
        list="$list libncurses5-dev xz-utils tk-dev"
    fi
    INSTALL_LIST=`getPackageListOfNotExists "$list"`
    if [[ ! -z $INSTALL_LIST ]]; then
        if [[ "$PLATFORM" == "MacOSX" ]]; then
            brew update
            # brew upgrade pyenv pyenv-virtualenv
            brew install $INSTALL_LIST
            return $?
        else
            sudo apt-get update
            sudo apt-get install -y $INSTALL_LIST
            return $?
        fi
    fi
    return 0
}

FIND_PYTHON_ENV=`pyenv versions | sed 's/*//g' | awk '{print($1);}' | egrep "^${OPY_PYTHON_VERSION_REGEX}$"`
if [[ -z $FIND_PYTHON_ENV ]]; then
    echo "Not found $OPY_PYTHON_VERSION pyenv."
    echo "Check & Install dependencies ..."

    installDependencies
    INSTALL_RESULT_CODE=$?
    if [[ $INSTALL_RESULT_CODE -ne 0 ]]; then
        echo "Install dependencies failure: $INSTALL_RESULT_CODE"
        exit 1
    fi

    if [[ "$PLATFORM" == "MacOSX" ]]; then
        echo "Use the homebrew's OpenSSL."
        echo " * See also: https://github.com/pyenv/pyenv/wiki/Common-build-problems"
        echo "Install python from pyenv (--enable-framework) ..."
        CFLAGS="-I$(brew --prefix openssl)/include" \
        LDFLAGS="-L$(brew --prefix openssl)/lib"    \
        PYTHON_CONFIGURE_OPTS="--enable-framework"  \
            pyenv install $OPY_PYTHON_VERSION
        INSTALL_RESULT_CODE=$?
    else
        echo "Install python from pyenv (--enable-shared) ..."
        PYTHON_CONFIGURE_OPTS="--enable-shared" \
            pyenv install $OPY_PYTHON_VERSION
        INSTALL_RESULT_CODE=$?
    fi

    if [[ $INSTALL_RESULT_CODE -ne 0 ]]; then
        echo "Install failure: $INSTALL_RESULT_CODE"
        exit 1
    fi
fi

FIND_OPY_ENV=`pyenv versions | sed 's/*//g' | awk '{print($1);}' | egrep "^$OPY_ENV_NAME_REGEX$"`
#echo "FIND_OPY_ENV: $FIND_OPY_ENV"
if [[ -z $FIND_OPY_ENV ]]; then
    echo "Not found $OPY_ENV_NAME pyenv."
    pyenv virtualenv "$OPY_PYTHON_VERSION" "$OPY_ENV_NAME"
fi

CURRENT_PYENV_VERSION=`pyenv version | awk '{ print($1); }'`
#echo "CURRENT_PYENV_VERSION: $CURRENT_PYENV_VERSION"
if [[ "$CURRENT_PYENV_VERSION" != "$OPY_ENV_NAME" ]]; then
    pyenv shell $OPY_ENV_NAME
else
    pyenv activate $OPY_ENV_NAME
    #pyenv deactivate
fi

if [[ -z $OPY_ECHO ]]; then
    if [[ -z $OPY_QUIET || $OPY_QUIET -eq 0 ]]; then
        OPY_ECHO=1
    else
        OPY_ECHO=0
    fi
fi

if [[ $OPY_ECHO -ne 0 ]]; then
    echo "[OSOM Python Environment]"
    echo "* Python version: $(python --version 2>&1)"
    echo "* Python executable: $(which python)"
    echo "* Pyenv which python: $(pyenv which python)"
    echo "* Pyenv version: $(pyenv version | awk '{print($1);}')"
fi

