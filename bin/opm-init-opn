#!/usr/bin/env bash
# - ref: https://github.com/tj/n

if [[ -z $(which opm-version 2> /dev/null) ]]; then
PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd):$PATH"
fi

N_URL="https://raw.githubusercontent.com/tj/n/master/bin/n"
N_INSTALL_DIR="$HOME/.n"
N_BIN_DIR="$N_INSTALL_DIR/bin"
N_VERSIONS_DIR="$N_INSTALL_DIR/n/versions"
N_CMD_PATH="$N_BIN_DIR/n"

function get_n_path
{
    PATH=$N_BIN_DIR:$PATH which n 2> /dev/null
}

function must_n_path
{
    local n_cmd=$(get_n_path)
    if [[ -z $n_cmd ]]; then
        opm-println-error "Not found n command."
        exit 1  # The assertion error ends immediately.
    fi
    echo "$n_cmd"
}

function find_node_version
{
    local version=$1
    local n_cmd=$(must_n_path)
    N_PREFIX=$N_INSTALL_DIR "$n_cmd" ls | sed 's|^node/||' | grep --color=never -Fx "$version"
}

function find_not_found_cmds
{
    if [[ $# -ge 1 ]]; then
        if [[ -z $(which "$1" 2> /dev/null) ]]; then
            echo -n "$1"
        fi
        shift
    fi
    if [[ $# -ge 1 ]]; then
        for i in $@; do
            if [[ -z $(which "$1" 2> /dev/null) ]]; then
                echo -n " $i"
            fi
        done
    fi
}

# ---------
# Install n
# ---------

function install_n
{
    local not_found_cmds=$(find_not_found_cmds curl)
    if [[ -n $not_found_cmds ]]; then
        opm-println "Not found commands: $not_found_cmds"
        opm-package update
        opm-package install $not_found_cmds

        not_found_cmds=$(find_not_found_cmds curl)
        if [[ -n $not_found_cmds ]]; then
            opm-println-error "installation failed: $not_found_cmds"
            return 1
        fi
    fi

    opm-println "Install n ..."
    if [[ ! -d "$N_BIN_DIR" ]]; then
        mkdir -p "$N_BIN_DIR"
    fi
    if [[ ! -d "$N_VERSIONS_DIR" ]]; then
        mkdir -p "$N_VERSIONS_DIR"
    fi

    curl -L -o "$N_CMD_PATH" "$N_URL"
    chmod +x "$N_CMD_PATH"
}

function install_n_if_not_exist
{
    if [[ -n $(get_n_path) ]]; then
        return 0
    fi

    opm-println "Not found 'n' command."
    install_n

    local code=$?
    if [[ $code -ne 0 ]]; then
        opm-println-error "n installation failed: $code"
        return $code
    fi
}

# -------------------
# Install node with n
# -------------------

function install_node_if_not_exist
{
    local node_version=$1
    if [[ -n $(find_node_version $node_version) ]]; then
        return 0
    fi

    opm-println "Not found '$node_version' in n."
    opm-println "Install node $node_version ..."

    local n_cmd=$(must_n_path)
    N_PREFIX=$N_INSTALL_DIR "$n_cmd" "$node_version"

    local code=$?
    if [[ $code -ne 0 ]]; then
        opm-println-error "node installation failed: $code"
        return $code
    fi
}

# ----------
# Activate n
# ----------

function active_n
{
    export N_PREFIX=$N_INSTALL_DIR
    export PATH="$N_BIN_DIR:$PATH"
}

function print_n_infos
{
    opm-println-info "[OSOM Node Environment]"
    opm-println-info "- Node version: $(node --version 2>&1)"
    opm-println-info "- Node executable: $(which node)"
    opm-println-info "- N version: $(n --version)"
}

function exit_on_error
{
    local code=$?
    if [[ $code -ne 0 ]]; then
        exit $code
    fi
}

function opn_main
{
    local node_version=$1
    local n_verbose=$2

    # Installation ...

    install_n_if_not_exist
    exit_on_error

    install_node_if_not_exist "$node_version"
    exit_on_error

    # Activation ...

    active_n
    exit_on_error

    # Information ...

    if [[ $n_verbose -ne 0 ]]; then
        print_n_infos
    fi
}

OPN_VERSION=${OPN_VERSION:-14.16.1}
OPN_VERBOSE=${OPN_VERBOSE:-0}

opn_main "$OPN_VERSION" "$OPN_VERBOSE"

