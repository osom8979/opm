#!/usr/bin/env bash

if ! command -v opm-version &> /dev/null; then
PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" || exit; pwd):$PATH"
fi

# https://github.com/tj/n
INSTALL_PREFIX="$(opm-home)/var/n"
N_EXE="$(opm-home)/etc/n/n"
RECOMMEND_PACKAGES=(yarn neovim)

if [[ ! -x "$N_EXE" ]]; then
    opm-println-error "Could not find executable n command on path '$N_EXE'"
    exit 1
fi

# -------------------
# Install node with n
# -------------------

function install_node_if_not_exist
{
    local n_prefix=$1
    local node_exe="$n_prefix/bin/node"
    local node_version=$2

    if [[ -x "$node_exe" ]]; then
        local actually_version
        actually_version="$("$node_exe" --version | sed 's/^v//g')"

        if [[ "$actually_version" != "$node_version" ]]; then
            opm-println-warn \
                "Mismatch node version" \
                "\n Expected: $node_version" \
                "\n Actually: $actually_version"
        fi
        return 0
    fi

    opm-println "Could not find executable node command on path '$node_exe'"
    opm-println "Install node $node_version ..."

    N_PREFIX="$n_prefix" "$N_EXE" install "$node_version"

    local code=$?
    if [[ $code -ne 0 ]]; then
        opm-println-error "node installation failed: $code"
        return $code
    fi

    opm-println "Install recommend packages"
    for i in "${RECOMMEND_PACKAGES[@]}"; do
        opm-println "Install npm package: "
        N_PREFIX="$n_prefix" "$N_EXE" exec "$node_version" npm install --global "$i"
    done
}

# ----------
# Activate n
# ----------

function active_n
{
    export PATH="$1/bin:$PATH"
}

function print_node_infos
{
    opm-println-info "[OSOM Node Environment]"
    opm-println-info "- Node version: $(node --version 2>&1)"
    opm-println-info "- Node executable: $(which node)"
}

function exit_on_error
{
    local code=$?
    if [[ $code -ne 0 ]]; then
        exit $code
    fi
}

function opn_main
{
    local node_version=$1
    local n_dirname=$2
    local n_verbose=$3
    local n_prefix="$INSTALL_PREFIX/$n_dirname"

    # Installation ...

    install_node_if_not_exist "$n_prefix" "$node_version"
    exit_on_error

    # Activation ...

    active_n "$n_prefix"
    exit_on_error

    # Information ...

    if [[ $n_verbose -ne 0 ]]; then
        print_node_infos
    fi
}

CURRENT_USER_NAME=$(id -u -n)

OPN_PREFIX=${OPN_PREFIX:-opn}
OPN_USER=${OPN_USER:-$CURRENT_USER_NAME}
OPN_VERSION=${OPN_VERSION:-$(opm-variable OPN18_VERSION)}
OPN_SUFFIX=${OPN_SUFFIX:-default}
OPN_DEFAULT_ENV=$OPN_PREFIX-$OPN_USER-$OPN_VERSION-$OPN_SUFFIX

OPN_ENV=${OPN_ENV:-$OPN_DEFAULT_ENV}
OPN_VERBOSE=${OPN_VERBOSE:-$(opm-variable OPN_VERBOSE)}

opn_main "$OPN_VERSION" "$OPN_ENV" "$OPN_VERBOSE"
