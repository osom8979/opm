#!/usr/bin/env bash

if ! command -v opm-version &> /dev/null; then
PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" || exit; pwd):$PATH"
fi

USAGE="
Usage: ${BASH_SOURCE[0]} [options] ...

Available options are:
  -h, --help    Print this message.
  -D            Use default settings
  --skip-installation-check
                Skip package installation verification.
  --            Stop handling options.
  ...           Command-line arguments for pytest.
"

PYTEST_CONFIG="
[pytest]
cache_dir = .pytest_cache

# pytest-cov
# these values are generally used when running product code.
[run]
branch = True
data_file = build/cov/data
source = tester
source_pkgs = cvp
omit =
    */__init__.py
    */__main__.py

# pytest-cov
# values common to many kinds of reporting.
[report]
exclude_lines =
    noqa
    nocov
    if __name__ == .__main__.:

# pytest-cov
# values particular to html reporting.
[html]
directory = build/cov/html

# pytest-cov
# values particular to xml reporting.
[xml]
output = build/cov.xml
"

function opy_pytest_main
{
    local default=0
    local skip_installation_check=0

    while [[ -n $1 ]]; do
        case $1 in
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -D)
            default=1
            shift
            ;;
        --skip-installation-check)
            skip_installation_check=1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
        esac
    done

    local args=()
    if [[ $default -ne 0 ]]; then
        args+=(
            "-v"
            "--cov"
            "--cov-report=term-missing"
            "--cov-report=html"
            "--cov-config" <(echo "$PYTEST_CONFIG")
        )
    fi

    if [[ $skip_installation_check -eq 0 ]]; then
        opy-checked-install pytest coverage pytest-cov
    fi

    opy -m pytest "${args[@]}" "$@"
}

opy_pytest_main "$@"
