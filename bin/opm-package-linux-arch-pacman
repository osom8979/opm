#!/usr/bin/env bash

if [[ -z $(which opm-version 2> /dev/null) ]]; then
OPM_BIN_PATH=`cd "$(dirname "${BASH_SOURCE[0]}")"; echo "$PWD"`
PATH="$OPM_BIN_PATH:$PATH"
fi

function getmanager_linux_arch_pacman
{
    opm-println-error "Unsupported operation."
    return 1
}

function which_linux_arch_pacman
{
    which pacman 2> /dev/null
}

function sync_linux_arch_pacman
{
    if [[ -z $(which_linux_arch) ]]; then
        opm-println-error "Not found pacman command."
        return 1
    fi

    sudo pacman -Sy
}

function exist_linux_arch_pacman
{
    if [[ -z $(which_linux_arch) ]]; then
        opm-println-error "Not found pacman command."
        return 1
    fi
    if [[ $# -eq 0 ]]; then
        opm-println-error "You must enter the package."
        return 1
    fi

    local packages=`pacman -Q | awk '{ print $1 }'`
    for i in $@; do
        echo "$packages" | grep "^$i\$"
    done
}

function list_linux_arch_pacman
{
    if [[ -z $(which_linux_arch) ]]; then
        opm-println-error "Not found pacman command."
        return 1
    fi
    if [[ $# -eq 0 ]]; then
        opm-println-error "You must enter the package."
        return 1
    fi

    pacman -Ql "$@"
}

function install_linux_arch_pacman
{
    if [[ -z $(which_linux_arch) ]]; then
        opm-println-error "Not found pacman command."
        return 1
    fi
    if [[ $# -eq 0 ]]; then
        opm-println-error "You must enter the package."
        return 1
    fi

    # [WARNING]
    #   --noconfirm
    #     Bypass any and all "Are you sure?" messages.
    #     Itâ€™s not a good idea to do this unless you want to run pacman from a script.
    sudo pacman -S "$@"
}

function remove_linux_arch_pacman
{
    if [[ -z $(which_linux_arch) ]]; then
        opm-println-error "Not found pacman command."
        return 1
    fi
    if [[ $# -eq 0 ]]; then
        opm-println-error "You must enter the package."
        return 1
    fi

    sudo pacman -Rs "$@"
}

