snippet snip-cv2-video-capture
	import cv2

	cap = cv2.VideoCapture("sample.mp4")

	while cap.isOpened():
		ret, frame = cap.read()
		if not ret:
			break

		gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
		cv2.imshow("frame", gray)

		keycode = cv2.waitKey(1)
		if keycode & 0xFF == ord("q"):
			break

	cap.release()
	cv2.destroyAllWindows()


snippet snip-cv2-select-roi
	import cv2
	import numpy as np

	color = (0, 0, 255)
	thickness = 0
	line_type = cv2.LINE_8

	img = np.zeros((300, 300, 3), dtype=np.uint8)
	roi = cv2.selectROI(img)
	cv2.rectangle(img, roi, color, thickness, line_type)
	cv2.imshow("Preview", img)
	cv2.waitKey()


snippet snip-unittest-default
	from unittest import TestCase, main

	class ${1:Name}TestCase(TestCase):
		@classmethod
		def setUpClass(cls):
			pass

		@classmethod
		def tearDownClass(cls):
			pass

		def setUp(self):
			pass

		def tearDown(self):
			pass

		def test_default(self):
			self.assertTrue(True)

	if __name__ == "__main__":
		main()


snippet snip-av-rtsp-streaming
	import av
	import cv2
	import io
	import numpy as np
	import time

	video_src = "sample.mp4"
	video_index = 0
	frame_format = "bgr24"
	options = dict(rtsp_transport="tcp")
	container_options = dict()
	stream_options = list()

	container = av.open(
		video_src,
		options=options,
		container_options=container_options,
		stream_options=stream_options,
	)
	container.streams.video[video_index].thread_type = "AUTO"  # Go faster!
	frames = container.decode(video=video_index)

	while True:
		begin = time.time()

		frame = next(frames)
		last_frame = frame.to_ndarray(format=frame_format)
		last_index = frame.index
		last_pts = frame.pts

		elapsed = time.time() - begin

		buffer = io.StringIO()
		buffer.write(f"Index={last_index},")
		buffer.write(f"PTS={last_pts},")
		buffer.write(f"Shape={last_frame.shape},")
		buffer.write(f"Elapsed={elapsed:.3f}s")
		print(buffer.getvalue().strip())

		cv2.imshow("Frame", last_frame)
		if cv2.waitKey(1) & 0xFF == ord("q"):
			break


snippet snip-directory-retrieve
	import os

	nodenames = os.listdir(os.getcwd())
	# or
	for dirpath, dirnames, filenames in os.walk(os.getcwd()):
		print(dirpath)
		for dirname in dirnames:
			print(dirname)
		for filename in filenames:
			print(filename)


