snippet snip-cv2-video-capture
	# -*- coding: utf-8 -*-

	import cv2

	cap = cv2.VideoCapture("sample.mp4")

	while cap.isOpened():
		ret, frame = cap.read()
		if not ret:
			break

		gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
		cv2.imshow("frame", gray)

		keycode = cv2.waitKey(1)
		if keycode & 0xFF == ord("q"):
			break

	cap.release()
	cv2.destroyAllWindows()


snippet snip-cv2-select-roi
	# -*- coding: utf-8 -*-

	import cv2
	import numpy as np

	canvas = np.zeros((300, 300, 3), dtype=np.uint8)
	color = (0, 0, 255)
	thickness = 0
	line_type = cv2.LINE_8

	while True:
		r = cv2.selectROI(canvas)
		if r == (0, 0, 0, 0):
			break

		img = canvas.copy()
		cv2.rectangle(img, r, color, thickness, line_type)
		cv2.imshow("preview", img)

		keycode = cv2.waitKey(1)
		if keycode & 0xFF == ord("q"):
			break


snippet snip-unittest-default
	# -*- coding: utf-8 -*-

	from unittest import TestCase

	class ${1:Name}TestCase(TestCase):
		@classmethod
		def setUpClass(cls):
			pass

		@classmethod
		def tearDownClass(cls):
			pass

		def setUp(self):
			pass

		def tearDown(self):
			pass


snippet snip-av-rtsp-streaming
	import av
	import time
	import numpy as np
	import cv2

	video_src = 'sample.mp4'
	video_index = 0
	frame_format = 'bgr24'
	options = { 'rtsp_transport': 'tcp' }
	container_options = {}
	stream_options = []

	container = av.open(video_src, options=options,
						container_options=container_options,
						stream_options=stream_options)
	container.streams.video[video_index].thread_type = 'AUTO'  # Go faster!
	frames = container.decode(video=video_index)

	while True:
		begin = time.time()

		frame = next(frames)
		last_frame = frame.to_ndarray(format=frame_format)
		last_index = frame.index
		last_pts = frame.pts

		end = time.time()
		elapsed = int((end-begin)*1000)
		print(f'index={last_index}, pts={last_pts}, shape={last_frame.shape}, elapsed={elapsed}ms')

		cv2.imshow('frame', last_frame)
		if cv2.waitKey(1) & 0xFF == ord('q'):
			break


