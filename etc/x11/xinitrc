#!/usr/bin/env bash

if [[ -z $OPM_HOME ]]; then
    echo 'Not defined OPM_HOME variable.'
    exit 1
fi

WHICH_XRDB=`which xrdb 2> /dev/null`
WHICH_XMODMAP=`which xmodmap 2> /dev/null`

SYS_RESOURCES=/etc/X11/xinit/.Xresources
OPM_RESOURCES=$OPM_HOME/etc/x11/xresources
USR_RESOURCES=$HOME/.Xresources

SYS_MODMAP=/etc/X11/xinit/.Xmodmap
OPM_MODMAP=$OPM_HOME/etc/x11/xmodmap
USR_MODMAP=$HOME/.Xmodmap

SYS_INITRC_DIR=/etc/X11/xinit/xinitrc.d
OPM_INITRC_DIR=$OPM_HOME/etc/x11/xinitrc.d

LOG_DIR=$OPM_HOME/var/log
LOG_PATH=$LOG_DIR/xinitrc.log

STATE_UPDATE_SECONDS=1

function print_raw
{
    echo "$@" >> $LOG_PATH
}

function print_info
{
    print_raw $(date +%Y%m%d_%H%M%S) "[INFO]" "$@"
}

function print_error
{
    print_raw $(date +%Y%m%d_%H%M%S) "[ERROR]" "$@"
}

function merge_xresource
{
    local file=$1
    if [[ -f "$file" ]]; then
        print_info "xrdb -merge $file"
        xrdb -merge "$file"
    else
        print_error "Not found xresource file: $file"
    fi
}

function merge_xmodmap
{
    local file=$1
    if [[ -f "$file" ]]; then
        print_info "xmodmap $file"
        xmodmap "$file"
    else
        print_error "Not found xmodmap file: $file"
    fi
}

## -----------------
## Print information
## -----------------

print_raw
print_info "Start xinitrc in the opm project."

## -----------------------------
## Merge in defaults and keymaps
## -----------------------------

if [[ -n "$WHICH_XRDB" ]]; then
    merge_xresource "$SYS_RESOURCES"
    merge_xresource "$OPM_RESOURCES"
    merge_xresource "$USR_RESOURCES"
else
    print_error "Not found xrdb executable."
fi

if [[ -n "$WHICH_XMODMAP" ]]; then
    merge_xmodmap "$SYS_MODMAP"
    merge_xmodmap "$OPM_MODMAP"
    merge_xmodmap "$USR_MODMAP"
else
    print_error "Not found xmodmap executable."
fi

if [[ -d /etc/X11/xinit/xinitrc.d ]]; then
    for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
        if [[ -x "$f" ]]; then
            print_info "source $f"
            source "$f"
        else
            print_error "Not executable source: $f"
        fi
    done
else
    print_error "Not exists directory: /etc/X11/xinit/xinitrc.d"
fi

## ------------
## IME settings
## ------------

function start_ime_fcitx
{
    local which_fcitx=`which fcitx 2> /dev/null`
    if [[ -n "$which_fcitx" ]]; then
        print_info "Start IME: fcitx"
        export GTK_IM_MODULE=fcitx
        export QT_IM_MODULE=fcitx
        export XMODIFIERS=@im=fcitx
        fcitx &
    else
        print_error "Not found fcitx executable."
    fi
}

function start_ime_ibus
{
    local which_ibus_daemon=`which ibus-daemon 2> /dev/null`

    if [[ -n "$which_ibus_daemon" ]]; then
        print_info "Start IME: ibus"
        export GTK_IM_MODULE=ibus
        export QT_IM_MODULE=ibus
        export XMODIFIERS=@im=ibus
        ibus-daemon -drx
    else
        print_error "Not found ibus-daemon executable."
    fi
}

#start_ime_fcitx
start_ime_ibus

# --------------
# Status updater
# --------------

function xorg_root_updater
{
    local which_xsetroot=`which xsetroot 2> /dev/null`
    if [[ ! -n "$which_xsetroot" ]]; then
        print_error "Not found xsetroot executable."
        return
    fi

    while true; do
        local date_time=$(date +"%F %T")
        local root_name=$date_time

       "$which_xsetroot" -name "$root_name"
       sleep ${STATE_UPDATE_SECONDS}s
    done
}

# ------------------
# Run window manager
# ------------------

function start_xmonad
{
    local which_xmonad=`which xmonad 2> /dev/null`

    if [[ -n "$which_xmonad" ]]; then
        print_info "Run $which_xmonad"
        exec "$which_xmonad"
    else
        print_error "Not found xmonad executable."
        exit 1
    fi
}

function start_qtile
{
    local which_qtile=`which qtile 2> /dev/null`
    local qtile_config_dir=$OPM_HOME/etc/qtile
    local qtile_config_path=$qtile_config_dir/config.py

    if [[ -n "$which_qtile" ]]; then
        print_info "Run $which_qtile"
        PYTHONPATH="$qtile_config_dir:$PYTHONPATH" "$which_qtile" -c "$qtile_config_path" "$@"
    else
        print_error "Not found qtile executable."
        exit 1
    fi
}

function start_dwm
{
    local which_dwm=`which dwm 2> /dev/null`

    if [[ -n "$which_dwm" ]]; then
        print_info "Run $which_dwm"
        exec "$which_dwm"
    else
        print_error "Not found dwm executable."
        exit 1
    fi
}

function start_opwm
{
    local which_opwm=`which opwm 2> /dev/null`

    if [[ -n "$which_opwm" ]]; then
        print_info "Run $which_opwm"
        exec "$which_opwm"
    else
        print_error "Not found opwm executable."
        exit 1
    fi
}

xorg_root_updater &

#start_xmonad
#start_qtile
#start_dwm
start_opwm

